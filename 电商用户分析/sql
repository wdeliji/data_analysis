create database taobao;
use taobao;

create table user_behavior (user_id int(9), item_id int(9), category_id int(9), behavior_type varchar(5), timestamps int(14) );


desc user_behavior;
select * from user_behavior limit 5;
select count(1) from user_behavior;

-- 改变字段名
alter table user_behavior change timestamp timestamps int(14);
desc user_behavior;

-- 检查空值 
select * from user_behavior where user_id is null or item_id is null or category_id is null or behavior_type is null or timestamps is null;
select * from user_behavior where item_id is null;
select * from user_behavior where category_id is null;
select * from user_behavior where behavior_type is null;
select * from user_behavior where timestamps is null;

-- 检查重复值 
select user_id,item_id,timestamps from user_behavior
group by user_id,item_id,timestamps
having count(*)>1;

-- 去重 
alter table user_behavior add id int first;
select * from user_behavior limit 5;
alter table user_behavior modify id int primary key auto_increment;

delete user_behavior from
user_behavior,
(
select user_id,item_id,timestamps,min(id) id from user_behavior
group by user_id,item_id,timestamps
having count(*)>1
) t2
where user_behavior.user_id=t2.user_id
and user_behavior.item_id=t2.item_id
and user_behavior.timestamps=t2.timestamps
and user_behavior.id>t2.id;

-- 新增日期：date time hour
-- 更改buffer值
-- Buffer Pool(缓冲池)
show VARIABLES like '%_buffer%';  -- 查看当前缓冲池大小
set GLOBAL innodb_buffer_pool_size=535000000;  -- 设缓冲池为10G
-- 设置缓冲值大小要看自己的电脑的内存大小的70%左右。
-- 像我电脑16G内存，但是可能15G能用，设置了缓冲5G，总内存就有12G在使用中了


-- datetime
alter table user_behavior add datetimes TIMESTAMP(0); -- 秒后位数为0，没有毫秒等


-- 将字段类型为int（11）的事件类型转换为年月日
update user_behavior set datetimes=FROM_UNIXTIME(timestamps);
select * from user_behavior limit 5;


-- date
alter table user_behavior add dates char(10),add times char(8),add hours char(2);

alter table user_behavior add dates char(10);
alter table user_behavior add times char(8);
alter table user_behavior add hours char(2);
alter table user_behavior drop column hours;


-- 一次性插入三个语段
update user_behavior set dates=substring(datetimes,1,10),times=substring(datetimes,12,8),hours=substring(datetimes,12,2);
-- 分次插入
update user_behavior set dates=substring(datetimes,1,10);
update user_behavior set times=substring(datetimes,12,8);
update user_behavior set hours=substring(datetimes,12,2);

select * from user_behavior limit 5;

-- 去异常 
select max(datetimes),min(datetimes) from user_behavior where behavior_type='pv' ;
delete from user_behavior
where datetimes < '2017-11-25 00:00:00'
or datetimes > '2017-12-03 23:59:59';

-- 数据概览 
desc user_behavior;  -- 表结构概览
select * from user_behavior limit 5;
SELECT count(1) from user_behavior; -- 100095496条记录

-- 创建临时表 
drop table temp_behavior;
create table temp_behavior like user_behavior;
desc temp_behavior;

-- 截取 
insert into temp_behavior
select * from user_behavior limit 100000;

select * from temp_behavior;

-- pv  页面浏览量
select dates
,count(*) 'pv'   -- 页面浏览量
from temp_behavior
where behavior_type='pv'
GROUP BY dates;

-- uv 独立访客数
select dates
,count(distinct user_id) 'uv'
from temp_behavior
where behavior_type='pv'
GROUP BY dates;

-- 一条语句查出pv、uv 
select dates
,count(*) 'pv'
,count(distinct user_id) 'uv'
,round(count(*)/count(distinct user_id),1) 'pv/uv' -- 浏览深度
from temp_behavior
where behavior_type='pv'
GROUP BY dates;

-- 处理真实数据 （亿行）

DROP table pv_uv_puv;

-- 创建留存表
create table pv_uv_puv (
dates char(10),
hours char(2),
pv int(9),
uv int(9),
puv decimal(10,1)
);
show tables;

select * from pv_uv_puv;

insert into pv_uv_puv
select dates,hours
,count(*) 'pv'
,count(distinct user_id) 'uv'
,round(count(*)/count(distinct user_id),1) 'pv/uv'
from user_behavior
where behavior_type='pv'
GROUP BY dates,hours;

select * from pv_uv_puv ;
delete from pv_uv_puv where puv is null;
-- -- 去空值
delete from pv_uv_puv 
where dates is null or  pv is null or  uv is null or  puv is null;

select * from user_behavior where dates is null;
delete from user_behavior where dates is null;


-- 活跃用户 ------------------------------------------------------------
select user_id,dates 
from temp_behavior
group by user_id,dates;


select user_id,dates 
from user_behavior
group by user_id,dates;

-- 自关联  次日留存率
select * from 
  (
    select user_id,dates 
    from temp_behavior
    group by user_id,dates
  ) a,
	
  (
    select user_id,dates 
    from temp_behavior
    group by user_id,dates
  ) b
where a.user_id=b.user_id;

-- 筛选 a的dates < b.dates
select * from 
  (
    select user_id,dates 
    from temp_behavior
    group by user_id,dates
  ) a,
  (
    select user_id,dates 
    from temp_behavior
    group by user_id,dates
  ) b
where a.user_id=b.user_id and a.dates<b.dates;

-- 留存数 
select a.dates
      ,count(if(datediff(b.dates,a.dates)=0,b.user_id,null)) "当天留存率" 
      ,count(if(datediff(b.dates,a.dates)=1,b.user_id,null)) "次日留存率" 
      ,count(if(datediff(b.dates,a.dates)=3,b.user_id,null)) "三日留存率" 
from
(
select user_id,dates 
from temp_behavior
group by user_id,dates
) a
,(
select user_id,dates 
from temp_behavior
group by user_id,dates
) b
where a.user_id=b.user_id and a.dates<=b.dates
group by a.dates

-- 留存率 次日留存数/当日浏览量
select a.dates,
count(if(datediff(b.dates,a.dates)=1,b.user_id,null))/count(if(datediff(b.dates,a.dates)=0,b.user_id,null)) "次日留存率" -- 次日留存率
from
(select user_id,dates 
from temp_behavior
group by user_id,dates
) a
,(select user_id,dates 
from temp_behavior
group by user_id,dates
) b
where a.user_id=b.user_id and a.dates<=b.dates
group by a.dates

-- 保存结果 
create table retention_rate (
dates char(10),
retention_1 float 
);

delete from retention_rate;
select * from retention_rate;

insert into retention_rate
select a.dates
,count(if(datediff(b.dates,a.dates)=1,b.user_id,null))/count(if(datediff(b.dates,a.dates)=0,b.user_id,null)) retention_1
from
	(
		select user_id,dates 
		from user_behavior
		group by user_id,dates
	) a,
	(
		select user_id,dates 
		from user_behavior
		group by user_id,dates
	) b
where a.user_id=b.user_id and a.dates<=b.dates
group by a.dates;

select * from retention_rate
-------------------------------------------------------------------------------------------
-- 跳失率  只点击一次的用户数量/总用户量
-- 跳失用户  -- 只点击一次的用户
select count(*) 
from 
(
select user_id from user_behavior
group by user_id
having count(behavior_type) =1
 ) t
 
-- 跳失率为 68 /   ，跳失率比较低，说明用户可以快速找到所需要的信息，对用户比较完整的展示店铺的整体情况，商品也比较吸引用户，使其可以完成对各类商品的查看，后续可以继续保持店铺界面的搭建方式


-- 跳失率  跳失用户/总用户数  88/6761250
select sum(uv) from pv_uv_puv;  -- 总用户数



select * from user_behavior LIMIT 5;

-- 统计日期一小时的行为
select dates,hours
,count(if(behavior_type='pv',behavior_type,null)) 'pv'
,count(if(behavior_type='cart',behavior_type,null)) 'cart'
,count(if(behavior_type='fav',behavior_type,null)) 'fav'
,count(if(behavior_type='buy',behavior_type,null)) 'buy'
from temp_behavior
group by dates,hours
order by dates,hours

-- 存储 
create table date_hour_behavior(
dates char(10),
hours char(2),
pv int,
cart int,
fav int,
buy int);

-- 结果插入 
insert into date_hour_behavior
select dates,hours
		,count(if(behavior_type='pv',behavior_type,null)) 'pv' -- 计数：
		,count(if(behavior_type='cart',behavior_type,null)) 'cart' -- 计数：
		,count(if(behavior_type='fav',behavior_type,null)) 'fav' -- 计数：
		,count(if(behavior_type='buy',behavior_type,null)) 'buy' -- 计数：购买
from user_behavior
group by dates,hours
order by dates,hours;

select * from date_hour_behavior;


delete from date_hour_behavior where dates is null or hours is null or pv is null or cart is null or fav is null or buy is null; 


show tables;
drop table behavior_num,behavior_user_num;

-- -------------------------------- 用户转化率分析 -------------------
-- ------------------------------------------------- 统计各类行为的用户数量
select behavior_type,
	count(distinct user_id) behavior_user_num
from temp_behavior
group by behavior_type
order by behavior_type desc;

drop table behavior_user_num;
create table behavior_user_num(
	behavior_type varchar(5),
	behavior_count_num int
);
insert into behavior_user_num
select behavior_type,
	count(distinct (user_id)) behavior_user_num
from user_behavior
group by behavior_type
order by behavior_type desc;

select * from behavior_user_num;
select * from behavior_num;

drop table behavior_user_num_2
create table behavior_user_num_2(
	pro_cat varchar(20),
	num int
);

insert into  behavior_user_num_2
select "product_count",count(distinct(item_id))
from  user_behavior;

insert into  behavior_user_num_2
select "category_count",count(distinct(category_id))
from  user_behavior;
 
select * from behavior_user_num_3;
 
alter table behavior_user_num_2 add id int first;
update behavior_user_num_2 set id =1;

drop table behavior_user_num_3;
create table behavior_user_num_3(
	type varchar(20),
	num int,
	id int
);

insert into desc behavior_user_num_3 
select * from behavior_user_num
union ALL
select pro_cat,num,id from behavior_user_num_2;

alter table behavior_user_num_3 drop column id;

select * from  behavior_user_num_3;


-- 用户购买比例
select  672404/984105 ; -- 这段时间购买过商品的用户的比例

-- ------------------------------------------------- 统计各类行为的数量
select behavior_type,
	count(*) behavior_num
from temp_behavior
group by behavior_type
order by behavior_type desc;

delete from behavior_num;
create table behavior_num(
	behavior_type varchar(5),
	behavior_count_num int
);

insert into behavior_num
select behavior_type,
			 count(*) behavior_num
from user_behavior
group by behavior_type
order by behavior_type desc;
select * from behavior_num;


-- 浏览量/购买量

select  2015807/89660986; 	-- 购买率

select  (2888258+5530445)/89660986;	-- 收藏加购率

select * from behavior_num;



-- -------------------------------------------- 行为路径分析 

DROP view user_behavior_view;

create view user_behavior_view as
select user_id,item_id
	,count(if(behavior_type='pv',behavior_type,null)) 'pv'
	,count(if(behavior_type='fav',behavior_type,null)) 'fav'
	,count(if(behavior_type='cart',behavior_type,null)) 'cart'
	,count(if(behavior_type='buy',behavior_type,null)) 'buy'
	from user_behavior
group by user_id,item_id;

select * from user_behavior_view ;

drop table user_behavior_view_2;
create table user_behavior_view_2(
user_id char(50),
item_id char(50),
pv int,
cart int,
fav int,
buy int);

insert into user_behavior_view_2
select user_id,item_id
	,count(if(behavior_type='pv',behavior_type,null)) 'pv'
	,count(if(behavior_type='fav',behavior_type,null)) 'fav'
	,count(if(behavior_type='cart',behavior_type,null)) 'cart'
	,count(if(behavior_type='buy',behavior_type,null)) 'buy'
	from user_behavior
group by user_id,item_id;

select * from user_behavior_view_2;

-- 用户行为标准化

drop view user_behavior_standard;

create view user_behavior_standard AS
SELECT 
	user_id,
	item_id,
	(case when pv>0 then 1 else 0 end) 浏览了,  
	(case when fav>0 then 1 else 0 end) 收藏了,
	(case when cart>0 then 1 else 0 end) 加购了,
	(case when buy>0 then 1 else 0 end) 购买了
from user_behavior_view;

select * from user_behavior_standard;
-- 建表
create table user_behavior_standard_2(
user_id char(10),
item_id char(2),
浏览了 int,
收藏了 int,
加购了 int,
购买了 int);

insert into user_behavior_standard_2
SELECT 
	user_id,
	item_id,
	(case when pv>0 then 1 else 0 end) 浏览了,  
	(case when fav>0 then 1 else 0 end) 收藏了,
	(case when cart>0 then 1 else 0 end) 加购了,
	(case when buy>0 then 1 else 0 end) 购买了
from user_behavior_view;
select * from user_behavior_standard_2;


-- 路径类型

create view user_behavior_path as 
select 
		*,
		concat(浏览了,收藏了,加购了,购买了) AS 购买路径类型
from user_behavior_standard as a 
where a.购买了>0;

select * from user_behavior_path;

-- 
-- 统计用户各类行为数量
drop view path_count;

create view path_count as 
select 
购买路径类型,
count(*) 数量
from user_behavior_path
group by 购买路径类型
order by 数量 desc;

select * from path_count;

-- 文字描述版
drop table path_desc_CN;

CREATE table path_desc_CN
(
	path_type char(4),
	description varchar(40)
);
select * from path_desc_CN;

insert into path_desc_CN 
values('0001','直接购买了'),
('1001','浏览后购买了'),
('0011','加购后购买了'),
('1011','浏览加购后购买了'),
('0101','收藏后购买了'),
('1101','浏览收藏后购买了'),
('0111','收藏加购后购买了'),
('1111','浏览收藏加购后购买了');

select * from path_desc_CN;

select * 
from 
	path_count p join   w on p.`购买路径类型` = w.path_type
ORDER BY 数量 desc;

-- ----------------------------------------------------------
-- 保存结果表
 
-- --------------------------------------------------------------
select * from user_behavior_view;

select sum(buy)
from user_behavior_view
where buy>0 and fav=0 and cart=0;

 -- 1528016 直接购买，没有收藏加购
 
 select 2015807-1528016 -- 487791  -- 收藏加购后购买
 select 487791/(2888255+5530446)   -- 收藏加购后购买/收藏加购

-- ------------------------------------------------RFM模型

 --     最近一次消费（Recency）、消费频率（Frequency）、消费金额（Monetary）
 

-- 最近购买时间
select
	user_id,
	max(dates)
from temp_behavior
where behavior_type = "buy"
group by  user_id
order by 2 desc;

select * from temp_behavior limit 5;

-- 购买次数
select
	user_id,
	count(user_id)
from temp_behavior
where behavior_type = "buy"
group by  user_id
order by 2 desc;


-- 统一
select
	user_id,
	max(dates),
	count(user_id)
from temp_behavior
where behavior_type = "buy"
group by  user_id
order by 3 desc;
select * from rfm_model;

-- 存储
drop table if exists rfm_model;

create table rfm_model(
user_id int,
frequency int,
recent char(10)
);

INSERT into rfm_model
select
	user_id,
		count(user_id),
		max(dates)
from user_behavior
where behavior_type = "buy"
group by  user_id
order by 3 desc;
select * from rfm_model;


-- 根据购买次数对用户进行分层
select max(frequency),min(frequency) from rfm_model;

alter table rfm_model add column fscore int;

update rfm_model
set fscore = 
case
		when frequency between 1 and 10 then 1
		when frequency between 11 and 20 then 2
		when frequency between 21 and 30 then 3
		when frequency between 31 and 40 then 4
		when frequency between 41 and 50 then 5
		else 6
		end;
select * from rfm_model ORDER BY 2 asc;

	
-- 根据最近购买时间对用户进行分层
select max(recent),min(recent) from rfm_model;

alter table rfm_model add column rscore int;
update rfm_model
set rscore = 
case
		when recent = '2017-12-03' then 5
		when recent in ('2017-12-01','2017-12-02') then 4
		when recent in ('2017-11-29','2017-11-30') then 3
		when recent in ('2017-11-27','2017-11-28') then 2
		else 1
		end;
		
select * from rfm_model;

-- 分层
set @f_avg=null;    
set @r_avg=null;
select avg(fscore) into @f_avg from rfm_model;
select avg(rscore) into @r_avg from rfm_model;
select @f_avg;
select @r_avg;


select 
  *,(
    case
  when fscore>@f_avg and rscore>@r_avg then '价值用户'
  when fscore>@f_avg and rscore<@r_avg then '保持用户'
  when fscore<@f_avg and rscore>@r_avg then '发展用户'
  when fscore<@f_avg and rscore<@r_avg then '挽留用户'
  end) class
from rfm_model;


-- 插入
alter table rfm_model add column class varchar(40);
update rfm_model
set class = case
when fscore>@f_avg and rscore>@r_avg then '价值用户'
when fscore>@f_avg and rscore<@r_avg then '保持用户'
when fscore<@f_avg and rscore>@r_avg then '发展用户'
when fscore<@f_avg and rscore<@r_avg then '挽留用户'
end;
select * from rfm_model;

-- 统计各分区用户数
select 	class,	count(user_id) from rfm_model group by class;

-- ------------------------------------------------ 商品按热度分类 ---------------------------------------------
-- 统计商品的热门品类、热门商品、热门品类热门商品
select * from temp_behavior limit 5;
select category_id,
			count(if(behavior_type="pv",behavior_type,null)) "品类浏览量"
from temp_behavior
GROUP BY category_id
order by 2 DESC
limit 10;

select item_id,
	count(if(behavior_type="pv",behavior_type,null)) "商品浏览量"
from temp_behavior
GROUP BY category_id
order by 2 DESC
limit 10;

select category_id,item_id,
品类商品浏览量 from
(
select category_id,item_id
,count(if(behavior_type='pv',behavior_type,null)) '品类商品浏览量'
,rank()over(partition by category_id order by count(if(behavior_type='pv',behavior_type,null)) desc) r
from temp_behavior
GROUP BY category_id,item_id
order by 3 desc
) a
where a.r = 1
order by a.品类商品浏览量 desc
limit 10

-- 得到各类别热门商品中，销售量前十的

-- 存储
create table popular_categories(
category_id int,
pv int);

insert into popular_categories
select category_id
,count(if(behavior_type='pv',behavior_type,null)) '品类浏览量'
from user_behavior
GROUP BY category_id
order by 2 desc
limit 10;

select * from popular_categories;

create table popular_items(
item_id int,
pv int);

insert into popular_items
select item_id
,count(if(behavior_type='pv',behavior_type,null)) '商品浏览量'
from temp_behavior
GROUP BY item_id
order by 2 desc
limit 10;

create table popular_cateitems(
category_id int,
item_id int,
pv int);

insert into popular_cateitems
select category_id,item_id,
品类商品浏览量 from
(
select category_id,item_id
,count(if(behavior_type='pv',behavior_type,null)) '品类商品浏览量'
,rank()over(partition by category_id order by '品类商品浏览量' desc) r
from user_behavior
GROUP BY category_id,item_id
order by 3 desc
) a
where a.r = 1
order by a.品类商品浏览量 desc
limit 10;
insert into popular_cateitems(category_id ,item_id ,pv )  
values (4756105,812879,30079) ,
			(3607361,3845720,25650),
			(1080785,2032668,19141),
			(3848953,1535294,17840),
			(4818107,59883,17404),
			(2735466,3031354,17169),
			(1859277,3371523,17159),
			(1320293,1591862,16185),
			(2355072,987143,15988),
			(980903,2818406,15980);


select * from popular_categories;
select * from popular_items;
select * from popular_cateitems;

-- ------------------------------------------------ 商品转化率分析 ---------------------------------------------------------

-- 特定商品转化率分析--------------------
select * from temp_behavior;

select item_id
			,count(if(behavior_type='pv',behavior_type,null)) 'pv'
			,count(if(behavior_type='fav',behavior_type,null)) 'fav'
			,count(if(behavior_type='cart',behavior_type,null)) 'cart'
			,count(if(behavior_type='buy',behavior_type,null)) 'buy'
			,count(distinct if(behavior_type='buy',user_id,null))/count(distinct user_id) 商品转化率  -- 商品吸引到的用户占总用户的比例
from temp_behavior
group by item_id
order by 商品转化率 desc;

-- 保存结果
drop table item_detail;

create table item_detail(
item_id int,
pv int,
fav int,
cart int,
buy int,
user_buy_rate float
)

insert into item_detail
select item_id
			,count(if(behavior_type='pv',behavior_type,null)) 'pv'
			,count(if(behavior_type='fav',behavior_type,null)) 'fav'
			,count(if(behavior_type='cart',behavior_type,null)) 'cart'
			,count(if(behavior_type='buy',behavior_type,null)) 'buy'
			,count(distinct if(behavior_type='buy',user_id,null))/count(distinct user_id) "商品转化率"
from user_behavior
group by item_id  -- 商品ID
order by 商品转化率 desc;


-- 品类转化率分析------------------------------------------------------------------------------

create table category_detail(
category_id int,
pv int,
fav int,
cart int,
buy int,
user_buy_rate float);

insert into category_detail
select category_id
,count(if(behavior_type='pv',behavior_type,null)) 'pv'
,count(if(behavior_type='fav',behavior_type,null)) 'fav'
,count(if(behavior_type='cart',behavior_type,null)) 'cart'
,count(if(behavior_type='buy',behavior_type,null)) 'buy'
,count(distinct if(behavior_type='buy',user_id,null))/count(distinct user_id) 品类转化率
from user_behavior
group by category_id  -- 商品所属类目ID
order by 品类转化率 desc;

select * from category_detail;


show tables;


-- behavior_num
-- behavior_user_num
-- category_detail
-- date_hour_behavior
-- item_detail
-- path_count
-- path_desc_cn
-- path_result
-- popular_categories
-- popular_cateitems
-- popular_items
-- pv_uv_puv
-- retention_rate
-- rfm_model
-- temp_behavior
-- user_behavior
-- user_behavior_path
-- user_behavior_standard
-- user_behavior_view


select * from date_hour_behavior limit 5;


create table 流量转化(
阶段 varchar(40),
behavior_num int
);
select * from 流量转化;

insert  into 流量转化 VALUES
("浏览",89660670),
("收藏加购",8418701),
("收藏加购后购买",487791);




-- --------------------------------------------------------------------------------------------------------------------------------------





use taobao;

select * from category_4756105;

-- 第一名
create table category_4756105(
item_id int,
pv int,
cart int,
fav int,
buy int
)

insert into category_4756105
select item_id
,count(if(behavior_type='pv',behavior_type,null))   '商品浏览量'
,count(if(behavior_type='cart',behavior_type,null)) '商品加购量'
,count(if(behavior_type='fav',behavior_type,null))  '商品收藏量'
,count(if(behavior_type='buy',behavior_type,null))  '商品购买量'
from user_behavior
where category_id = 4756105
GROUP BY item_id
order by 2 desc
limit 10;

delete from category_4756105 order by pv limit 10;
select * from category_4756105;



-- 第二名  2355072
create table category_2355072(
item_id int,
pv int,
cart int,
fav int,
buy int
)

insert into category_2355072
select item_id
,count(if(behavior_type='pv',behavior_type,null))   '商品浏览量'
,count(if(behavior_type='cart',behavior_type,null)) '商品加购量'
,count(if(behavior_type='fav',behavior_type,null))  '商品收藏量'
,count(if(behavior_type='buy',behavior_type,null))  '商品购买量'
from user_behavior
where category_id = 2355072
GROUP BY item_id
order by 2 desc
limit 10;

select * from category_2355072;



-- 第三名  4145813
create table category_4145813(
item_id int,
pv int,
cart int,
fav int,
buy int
);

insert into category_4145813
select item_id
,count(if(behavior_type='pv',behavior_type,null))   '商品浏览量'
,count(if(behavior_type='cart',behavior_type,null)) '商品加购量'
,count(if(behavior_type='fav',behavior_type,null))  '商品收藏量'
,count(if(behavior_type='buy',behavior_type,null))  '商品购买量'
from user_behavior
where category_id = 4145813
GROUP BY item_id
order by 2 desc
limit 10;

select * from category_4145813;

-- 第四名  3607361
create table category_3607361(
item_id int,
pv int,
cart int,
fav int,
buy int
)

insert into category_3607361
select item_id
,count(if(behavior_type='pv',behavior_type,null))   '商品浏览量'
,count(if(behavior_type='cart',behavior_type,null)) '商品加购量'
,count(if(behavior_type='fav',behavior_type,null))  '商品收藏量'
,count(if(behavior_type='buy',behavior_type,null))  '商品购买量'
from user_behavior
where category_id = 3607361
GROUP BY item_id
order by 2 desc
limit 10;

select * from category_3607361;



-- 第五名  982926
create table category_982926(
item_id int,
pv int,
cart int,
fav int,
buy int
)

insert into category_982926
select item_id
,count(if(behavior_type='pv',behavior_type,null))   '商品浏览量'
,count(if(behavior_type='cart',behavior_type,null)) '商品加购量'
,count(if(behavior_type='fav',behavior_type,null))  '商品收藏量'
,count(if(behavior_type='buy',behavior_type,null))  '商品购买量'
from user_behavior
where category_id = 982926
GROUP BY item_id
order by 2 desc
limit 10;

select * from category_982926;

-- ****************
select * from user_behavior where dates is null;


-- ----------- 前五名的热门商品

desc user_behavior;
create table cate_dates_pv(
category_id int,
dates char(10),
pv_num int
)

select * from cate_dates_pv;
-- 每天前五个类别商品  --  cate_dates_pv
insert into cate_dates_pv
select category_id,dates,count(if(behavior_type='pv',behavior_type,null)) num
from 
user_behavior 
where category_id in (
		select * from (
		select 
		category_id
		from user_behavior
		group by category_id
		order by count(if(behavior_type='pv',1,null)) desc 
		limit 5) t
)  
GROUP BY category_id, dates
ORDER BY dates;

select * from cate_dates_pv;
desc cate_dates_pv;
 
-- 每小时前五个类别商品   --  cate_hours_pv
drop table cate_hours_pv;

select * from  
create table cate_hours_pv(
category_id int,
hours char(10),
pv_num int
);

insert into cate_hours_pv
select category_id,hours,count(if(behavior_type='pv',behavior_type,null)) num
from 
user_behavior 
where category_id in (
		select * from (
		select 
		category_id
		from user_behavior
		group by category_id
		order by count(if(behavior_type='pv',1,null)) desc 
		limit 5) t
)  
GROUP BY category_id, hours
ORDER BY hours;


-- 每天4756105类别的前五种产品的pv  --  cate_dates_4756105_pv   -- cate_hours_4756105_pv
drop table cate_dates_4756105_pv;
create table cate_hours_4756105_pv(
item_id int,
hours char(10),
pv_num int
);

insert into cate_hours_4756105_pv
select 
item_id,hours,
count(if(behavior_type='pv',behavior_type,null)) 
from user_behavior 
where item_id in 
( 
		select * from (
					select item_id
					from user_behavior
					where category_id = 4756105
					GROUP BY item_id
					order by count(if(behavior_type='pv',behavior_type,null)) desc
					limit 3
				)t
)
GROUP BY item_id,hours
order by hours;

select * from cate_hours_4756105_pv;


-- 商品品类占比
drop table top5_商品占比;
create table top5_商品占比(
category_id int,
num int,
ratio DECIMAL(5,4)
);

insert into top5_商品占比
SELECT 
  p.category_id,p.num,ROUND(p.num / t.total_num, 4) AS ratio
FROM 
  (SELECT 
      category_id,COUNT(DISTINCT item_id) AS num
    FROM  user_behavior
    WHERE  category_id IN (
        SELECT category_id
        FROM (
            SELECT category_id FROM user_behavior
            GROUP BY category_id
            ORDER BY COUNT(IF(behavior_type = 'pv', 1, NULL)) DESC
            LIMIT 5
          ) t
      )
    GROUP BY category_id
  ) p,
  (
    SELECT COUNT(DISTINCT item_id) AS total_num
    FROM  user_behavior
  ) t;
	
select * from top5_商品占比;

select count(DISTINCT category_id)
from user_behavior;
-- item_id: 4161140
-- category_id: 9437

select category_id,count(DISTINCT item_id)
from user_behavior
where category_id IN (
        SELECT category_id
        FROM (
            SELECT category_id FROM user_behavior
            GROUP BY category_id
            ORDER BY COUNT(IF(behavior_type = 'pv', 1, NULL)) DESC
            LIMIT 5
          ) t
      )
GROUP BY category_id;

-- category_id,count(DISTINCT item_id)
	-- 982926	  	54331
	-- 2355072		57568
	-- 3607361		35341
	-- 4145813		68328
	-- 4756105		47851


-- TOP-5商品的购买情况
create table buy_top_5_cate(
category_id int,
buy_num int 
);

insert into buy_top_5_cate
SELECT 
category_id, COUNT(IF(behavior_type = 'buy', 1, NULL)) num
    FROM  user_behavior
    WHERE  category_id IN (
        SELECT category_id
        FROM (
            SELECT category_id FROM user_behavior
            GROUP BY category_id
            ORDER BY COUNT(IF(behavior_type = 'pv', 1, NULL)) DESC
            LIMIT 5
          ) t
      )
    GROUP BY category_id;
select * from buy_top_5_cate;


-- 购买商品类别前5
drop table buy_cate_top_5;
create table buy_cate_top_5(
category_id int,
buy_num int 
);

insert into buy_cate_top_5
SELECT category_id,COUNT(IF(behavior_type = 'buy', 1, NULL)) 
FROM user_behavior
GROUP BY category_id
ORDER BY COUNT(IF(behavior_type = 'buy', 1, NULL)) DESC
LIMIT 5;
select * from buy_cate_top_5;






